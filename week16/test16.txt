1. Для чего служат формы на веб-страницах?
-чтобы получить необходимую информацию от пользователя

2. Каким типом задаётся поле ввода в форме текста?
-type = "text"

3. Какими способами можно обратиться к элементу формы?
-по document.forms.form1.elements или по индексам (но этого лучше не делать,тк в случае сбитой нумерации надо
будет все переписывать) или с использованем атрибута name     form1.elements.word;

4. Что такое событие `submit` для формы и как его можно использовать?
-событие для отправки данных фогрмы на сервер для обработки. можно использовать в самой форме или на кнопке
(но лучше в форме)
<button class='form__button' type='submit'>
        Отправить
    </button>

5. Восстановить значения умолчания в полях формы можно только по кнопке reset?
-не совсем, можно использовать reset в js(прописать функцию с reset()) 
и в html(<input type="reset" value="Сбросить">)

6. Каким способом можно отправить данные из формы на сервер?
- с помощью атрибута формы action и метода POST, через кнопку оправки, с помощью вызова метода submit() формы,
вызвать метод click() кнопки отправки

7. Как можно полностью перехватить и обработать js-функцией событие `submit` (отправку данных на сервер)?
-прописать функцию, которая будет автоматически это делать, когда будет выполняться определенное условие

8. Какие есть недостатки у стандартного способа задания валидации через HTML5?
-мы не можем редактировать всплывающее сообщение + эти способы имеют ограниченный функционал

9. Какие свойства доступны в объекте `validity` для проверки валидности элемента формы?
-valid: false //Поле не является валидным
customError: false //Не установлено специальное сообщение об ошибке
patternMismatch: false //Значение не удовлетворяет шаблону, указанному в атрибуте pattern
rangeOverflow: false //Значение не превышает максимальное значение, указанное в атрибуте max
rangeUnderflow: false //Значение должно быть больше или равно минимальному значению, указанному в атрибуте min
stepMismatch: false //Значение соответствует указанному шагу
tooLong: false //Значение не слишком длинное
tooShort: false //Значение не слишком короткое
typeMismatch: false //Значение соответствует указанному атрибуту type
valueMissing: false //Не отсутствует обязательное значение

10. Как можно проверить, является ли элемент формы валидным с использованием объекта `validity`?
-написать функцию проверки

11. Какие флаги могут быть использованы при создании регулярных выражений и какова их роль?
-`i` -регистронезависимый поиск

`g` -глобальный поиск всех совпадений, без него будет найдено только первое совпадение

`y` - поиск на конкретной позиции в тексте

`m` - многострочный режим

12. Что делает метод `match()` при работе с регулярными выражениями? Какие аргументы он принимает?
-возвращает массив совпадений с регулярным выражением. принимает бъекты регулярного выражения. Если будет передан
 объект obj, не являющийся регулярным выражением, он будет неявно преобразован в объект RegExp через вызов 
конструктора new RegExp(obj).

13. Что делает метод `test()` при проверке регулярного выражения на совпадение? Какие значения он возвращает?
-проверяет, есть ли хотя бы одно совпадение с регулярным выражением. возвращает булевые значения
